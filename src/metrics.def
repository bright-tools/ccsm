/* This file defines various details of the metrics which are measured by CCSM

   Enum name : Member of MetricType_e enumeration used to refer to the metric
   Short name : Mnemonic for the metric containing no spaces.  Used for filtering on the command line.
   Long name : Full name for the metric
   Glob : Does the metric apply at the global (i.e. collection of files) level 
   File : Does the metric apply at the file level?
   Fn: Does the metric apply at the function level?
   Mtd: Does the metric apply at the method level?
   Cumulative : Is the metric reported a cumulative value based on the node + children (e.g. count at the file context + count at fn + count at method)
   Multipass : Does this metric assumulate across multiple passes of the file?  Currently only meaningful with respect to files which are included in more than one of the C files being analysed.  See test_fn_call_multiple_files for an example of this.
   Report Local : In the case that it is a cumulative value, should the metric for the current context be reported in addition?
   Scaling : Scaling factor to be applied to the integer measure of the metric
   Description : Additional information (above and beyond the "long name") relating to the metric
*/

        /* Enum name                                          Short Name                        Long Name                         				               Glob?  File?  Fn?    Mtd?   Cumulative? Multipass? Report Local? Scaling   Description */
METRIC( METRIC_TYPE_FILES,                                    "FILE_CNT",                       "Files",                          				               true,  false, false, false, false,      false,     false,        1,        "" )
METRIC( METRIC_TYPE_BYTE_COUNT,                               "FILE_SIZE",                      "Size in bytes",									           true,  true,  false, false, true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_FUNCTIONS,                                "FUNC_CNT",                       "Functions",                      				               true,  true,  false, false, true,       false,     false,        1,        "" )

/* Keyword related metrics */
METRIC( METRIC_TYPE_IF,                                       "KW_IF_CNT",                      "'if' keyword count ",                				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_IF,                                 "RAW_KW_IF_CNT",                  "'if' keyword count (raw source)",				               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_ELSE,                                     "KW_ELSE_CNT",                    "'else' keyword count ",              				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_ELSE,                               "RAW_KW_ELSE_CNT",                "'else' keyword count (raw source)",			               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_FORLOOP,                                  "KW_FOR_CNT",                     "'for' keyword count",             				               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_FOR,                                "RAW_KW_FOR_CNT",                 "'for' keyword count (raw source)",				               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_RETURN,                                   "KW_RETURN_CNT",                  "'return' keyword count",          				               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_RETURN,                             "RAW_KW_RETURN_CNT",              "'return' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_DO,                                       "KW_DO_CNT",                      "'do' keyword count",           				               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_DO,                                 "RAW_KW_DO_CNT",                  "'do' keyword count (raw source)",			                   true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_WHILE,                                    "KW_WHILE_CNT",                   "'while' keyword count",           				               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_WHILE,                              "RAW_KW_WHILE_CNT",               "'while' keyword count (raw source)",			               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_SWITCH,                                   "KW_SWITCH_CNT",                  "'switch' keyword count",              				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_SWITCH,                             "RAW_KW_SWITCH_CNT",              "'switch' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_CASE,                                     "KW_CASE_CNT",                    "'case' keyword count",                				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_CASE,                               "RAW_KW_CASE_CNT",                "'case' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_BREAK,                                    "KW_BREAK_CNT",                   "'break' keyword count",							           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_BREAK,                              "RAW_KW_BREAK_CNT",               "'break' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_DEFAULT,                                  "KW_DEFAULT_CNT",                 "'default' keyword count",             				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_DEFAULT,                            "RAW_KW_DEFAULT_CNT",             "'default' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_GOTO,                                     "KW_GOTO_CNT",                    "'goto' keyword count",							               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_GOTO,                               "RAW_KW_GOTO_CNT",                "'goto' keyword count (raw source)",			               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC_ALIAS( "RAW_KW_GOTO_CNT", "HIS_GOTO" )
METRIC( METRIC_TYPE_AUTO,                                     "KW_AUTO_CNT",                    "'auto' keyword count",							               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_AUTO,                               "RAW_KW_AUTO_CNT",                "'auto' keyword count (raw source)",		   	  	           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_VOLATILE,                                 "KW_VOLATILE_CNT",                "'volatile' keyword count",						               true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_VOLATILE,                           "RAW_KW_VOLATILE_CNT",            "'volatile' keyword count (raw source)",		               true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_CONST,                                    "KW_CONST_CNT",                   "'const' keyword count",						               true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_CONST,                              "RAW_KW_CONST_CNT",               "'const' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_CONST,                               "KW_BODY_CONST_CNT",              "'const' keyword count (within function body)",	               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_CONST,                         "RAW_KW_BODY_CONST_CNT",          "'const' keyword count (raw source, within function body)",	   true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TYPEDEF,                                  "KW_TYPEDEF_CNT",                 "'typedef' keyword count",                                     true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_TYPEDEF,                            "RAW_KW_TYPEDEF_CNT",             "'typedef' keyword count (raw source)",                        true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_CONTINUE,                                 "KW_CONTINUE_CNT",                "'continue' keyword count",					    	           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_CONTINUE,                           "RAW_KW_CONTINUE_CNT",            "'continue' keyword count (raw source)",   	    	           true,  true,  true,  true,  true,       false,     false,        1,        "" )
/* TODO: Explicitly count anonymous typedefs? */
METRIC( METRIC_TYPE_UNION,                                    "KW_UNION_CNT",                   "'union' keyword count",    						           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_UNION,                               "KW_BODY_UNION_CNT",              "'union' keyword count (within function body)",    		       true,  true,  true,  true,  true,       false,      false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_UNION,                              "RAW_KW_UNION_CNT",               "'union' keyword count (raw source)",		                   true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_UNION,                         "RAW_KW_BODY_UNION_CNT",          "'union' keyword count (raw source, within function body)",    true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_STRUCT,                                   "KW_STRUCT_CNT",                  "'struct' keyword count",				                       true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_STRUCT,                              "KW_BODY_STRUCT_CNT",             "'struct' keyword count (within function body)",		       true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_STRUCT,                             "RAW_KW_STRUCT_CNT",              "'struct' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_STRUCT,                        "RAW_KW_BODY_STRUCT_CNT",         "'struct' keyword count (raw source, within function body)",   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_ENUM,                                     "KW_ENUM_CNT",                    "'enum' keyword count",				                           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_ENUM,                                "KW_BODY_ENUM_CNT",               "'enum' keyword count (within function body)",	 	           true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_ENUM,                               "RAW_KW_ENUM_CNT",                "'enum' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_ENUM,                          "RAW_KW_BODY_ENUM_CNT",           "'enum' keyword count (raw source, within function body)",     true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_CHAR,                                     "KW_CHAR_CNT",                    "'char' keyword count",					   	                   true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_CHAR,                                "KW_BODY_CHAR_CNT",               "'char' keyword count (within function body)",		           true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_CHAR,                               "RAW_KW_CHAR_CNT",                "'char' keyword count (raw source)",	   	                   true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_CHAR,                          "RAW_KW_BODY_CHAR_CNT",           "'char' keyword count (raw source, within function body)",     true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_UNSIGNED,                                 "KW_UNSIGNED_CNT",                "'unsigned' keyword count",				  		               true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_UNSIGNED,                            "KW_BODY_UNSIGNED_CNT",           "'unsigned' keyword count (within function body)",		       true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_UNSIGNED,                           "RAW_KW_UNSIGNED_CNT",            "'unsigned' keyword count (raw source)",			           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_UNSIGNED,                      "RAW_KW_BODY_UNSIGNED_CNT",       "'unsigned' keyword count (raw source, within function body)", true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_SIGNED,                                   "KW_SIGNED_CNT",                  "'signed' keyword count",            				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_SIGNED,                              "KW_BODY_SIGNED_CNT",             "'signed' keyword count (within function body)",		       true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_SIGNED,                             "RAW_KW_SIGNED_CNT",              "'signed' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )   
METRIC( METRIC_TYPE_TOKEN_BODY_SIGNED,                        "RAW_KW_BODY_SIGNED_CNT",         "'signed' keyword count (raw source, within function body)",   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_DOUBLE,                                   "KW_DOUBLE_CNT",                  "'double' keyword count",				                       true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_DOUBLE,                              "KW_BODY_DOUBLE_CNT",             "'double' keyword count (within function body)",		       true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_DOUBLE,                             "RAW_KW_DOUBLE_CNT",              "'double' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_DOUBLE,                        "RAW_KW_BODY_DOUBLE_CNT",         "'double' keyword count (raw source, within function body)",   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_FLOAT,                                    "KW_FLOAT_CNT",                   "'float' keyword count",				                       true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_FLOAT,                               "KW_BODY_FLOAT_CNT",              "'float' keyword count (within function body)",		           true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_FLOAT,                              "RAW_KW_FLOAT_CNT",               "'float' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_FLOAT,                         "RAW_KW_BODY_FLOAT_CNT",          "'float' keyword count (raw source, within function body)",    true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_INT,                                      "KW_INT_CNT",                     "'int' keyword count",		    	            	           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_INT,                                "RAW_KW_INT_CNT",                 "'int' keyword count (raw source)",		    	        	   true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_INT,                                 "KW_BODY_INT_CNT",                "'int' keyword count (within function body)",	          	   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_INT,                           "RAW_KW_BODY_INT_CNT",            "'int' keyword count (raw source, within function body)",	   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_LONG,                                     "KW_LONG_CNT",                    "'long' keyword count",             				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_LONG,                                "KW_BODY_LONG_CNT",               "'long' keyword count (within function body)",	          	   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_LONG,                               "RAW_KW_LONG_CNT",                "'long' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_LONG,                          "RAW_KW_BODY_LONG_CNT",           "'long' keyword count (raw source, within function body)",	   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_SHORT,                                    "KW_SHORT_CNT",                   "'short' keyword count",	               			           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_SHORT,                               "KW_BODY_SHORT_CNT",              "'short' keyword count (within function body)",	     		   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_SHORT,                              "RAW_KW_SHORT_CNT",               "'short' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_SHORT,                         "RAW_KW_BODY_SHORT_CNT",          "'short' keyword count (raw source, within function body)",	   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_STATIC,                                   "KW_STATIC_CNT",                  "'static' keyword count",			            	           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_STATIC,                              "KW_BODY_STATIC_CNT",             "'static' keyword count (within function body)",			   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_STATIC,                             "RAW_KW_STATIC_CNT",              "'static' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_STATIC,                        "RAW_KW_BODY_STATIC_CNT",         "'static' keyword count (raw source, within function body)",   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_EXTERN,                                   "KW_EXTERN_CNT",                  "'extern' keyword count",				                       true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_EXTERN,                             "RAW_KW_EXTERN_CNT",              "'extern' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_REGISTER,                                 "KW_REGISTER_CNT",                "'register' keyword count",			   			               true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_REGISTER,                           "RAW_KW_REGISTER_CNT",            "'register' keyword count (raw source)",			           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_VOID,                                     "KW_VOID_CNT",                    "'void' keyword count",					    		           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_BODY_VOID,                                "KW_BODY_VOID_CNT",               "'void' keyword count (within function body)",		    	   true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_VOID,                               "RAW_KW_VOID_CNT",                "'void' keyword count (raw source)",				           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_TOKEN_BODY_VOID,                          "RAW_KW_BODY_VOID_CNT",           "'void' keyword count (raw source, within function body)",     true,  true,  true,  true,  true,       false,     false,         1,        "" )
METRIC( METRIC_TYPE_OPERATOR_SIZE_OF,                         "OP_SIZEOF_CNT",                  "'sizeof' keyword/operator count",			  	               true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC_ALIAS( "OP_SIZEOF_CNT", "KW_SIZEOF_CNT" )
METRIC( METRIC_TYPE_TOKEN_OPERATOR_SIZE_OF,                   "RAW_OP_SIZEOF_CNT",              "'sizeof' keyword/operator count (raw source)",		           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC_ALIAS( "RAW_OP_SIZEOF_CNT", "RAW_KW_SIZEOF_CNT" )

// keywords: inline, restrict

METRIC( METRIC_TYPE_KEYWORD_CNT,                              "KW_CNT",                         "Number of keywords used",             				           true,  true,  true,  true,  true,       false,     true,         1,        "Total number of C keywords used" )
METRIC( METRIC_TYPE_KEYWORD_TYPES,                            "KW_TYPES_CNT",                   "Number of types of keyword used",             		           true,  true,  true,  true,  true,       false,     true,         1,        "" )

METRIC( METRIC_TYPE_LABEL_NAME,                               "IDENT_LABEL_CNT",                "label name count",                                            true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_LABEL_NAME,                         "RAW_IDENT_LABEL_CNT",            "label name count (raw source)",                               true,  true,  true,  true,  true,       false,     false,        1,        "" )

METRIC( METRIC_TYPE_NUMERIC_CONSTANTS,                        "NUMERIC_CONST_CNT",              "Number of instances of numeric constants",                    true,  true,  true,  true,  true,       false,     true,        1,        "" )
METRIC( METRIC_TYPE_NUMERIC_CONSTANTS_UNIQ,                   "NUMERIC_CONST_UNIQ",             "Number of unique numerical constant tokens",	               true,  true,  true,  true,  true,       false,     true,        1,        "Note that different representations of the same numeric value (e.g. '1' and '0x1') are currently treated as being different and each would be unique" )
METRIC( METRIC_TYPE_TOKEN_NUMERIC_CONSTANTS,                  "RAW_NUMERIC_CONST_CNT",          "Number of numerical constant tokens (raw source)",			   true,  true,  true,  true,  true,       false,     true,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_NUMERIC_CONSTANTS_UNIQ,             "RAW_NUMERIC_CONST_UNIQ",         "Number of unique numerical constant tokens (raw source)",	   true,  true,  true,  true,  true,       false,     true,        1,        "" )

METRIC( METRIC_TYPE_STRING_LITERALS,                          "STRING_LITERALS",                "Number of string literal tokens",			                   true,  true,  true,  true,  true,       false,     true,        1,        "" )
METRIC( METRIC_TYPE_STRING_LITERALS_UNIQ,                     "STRING_LITERALS_UNIQ",           "Number of unique string literal tokens",			           true,  true,  true,  true,  true,       false,     true,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_STRING_LITERALS,                    "RAW_STRING_LITERALS",            "Number of string literal tokens (raw source)",			       true,  true,  true,  true,  true,       false,     true,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_STRING_LITERALS_UNIQ,               "RAW_STRING_LITERALS_UNIQ",       "Number of unique string literal tokens (raw source)",		   true,  true,  true,  true,  true,       false,     true,        1,        "" )

METRIC( METRIC_TYPE_CHAR_CONSTS,                              "CHAR_CONSTS",                    "Number of character constants",	   		                   true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_CHAR_CONSTS_UNIQ,                         "CHAR_CONSTS_UNIQ",               "Number of unique character constants",                        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_CHAR_CONSTS,                        "RAW_CHAR_CONSTS",                "Number of character constants (raw source)",	   		       true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_CHAR_CONSTS_UNIQ,                   "RAW_CHAR_CONSTS_UNIQ",           "Number of unique character constants (raw source)",           true,  true,  true,  true,  true,       false,     false,        1,        "" )

// TODO: Should/do these include labels?
// TODO: Should identifiers be scoped?  i.e. should variable 'a' at file level be a different identifier to a local 'a' within a function?
METRIC( METRIC_TYPE_UNRESERVED_IDENTIFIERS,                   "UNRESERVED_IDENTIFIERS",         "Number of (unreserved) identifier tokens",			           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_UNRESERVED_IDENTIFIERS_UNIQ,              "UNRESERVED_IDENTIFIERS_UNIQ",    "Number of unique (unreserved) identifier tokens",             true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_BODY_UNRESERVED_IDENTIFIERS,              "BODY_UNRESERVED_IDENTIFIERS",     "Number of (unreserved) identifier tokens (within function body)",			false,  false,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_BODY_UNRESERVED_IDENTIFIERS_UNIQ,         "BODY_UNRESERVED_IDENTIFIERS_UNIQ","Number of unique (unreserved) identifier tokens (within function body)",  false,  false,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_UNRESERVED_IDENTIFIERS,             "RAW_UNRESERVED_IDENTIFIERS",     "Number of (unreserved) identifier tokens (raw source)",	   true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_UNRESERVED_IDENTIFIERS_UNIQ,        "RAW_UNRESERVED_IDENTIFIERS_UNIQ","Number of unique (unreserved) identifier tokens (raw source)",true,  true,  true,  true,  true,       false,     false,        1,        "" )


METRIC( METRIC_TYPE_VARIABLE_FILE_LOCAL,                      "VAR_FILE_LOC_CNT",               "File-scope total local variable declarations",                true,  true,  false, false, true,       false,     false,        1,        "Includes auto and static but not extern" )
METRIC( METRIC_TYPE_VARIABLE_FILE_STATIC,                     "VAR_FILE_LOC_STATIC_CNT",        "File-scope static variable declarations",                     true,  true,  false, false, true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_VARIABLE_FILE_EXTERN,                     "VAR_FILE_EXT_CNT",               "File-scope external variable declarations",                   true,  true,  false, false, true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_VARIABLE_FILE_VOLATILE,                   "VAR_FILE_VOLATILE_CNT",          "File-scope volatile variable declarations",                   true,  true,  false, false, true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_VARIABLE_FILE_CONST,                      "VAR_FILE_CONST_CNT",             "File-scope constant variable declarations",                   true,  true,  false, false, true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_VARIABLE_FN_LOCAL,                        "VAR_FN_LOC_CNT",                 "Function-scope total local variable declarations",            true,  false, true,  true,  true,       false,     false,        1,        "Includes auto and static but not extern" )
METRIC( METRIC_TYPE_VARIABLE_FN_STATIC,                       "VAR_FN_LOC_STATIC_CNT",          "Function-scope static variable declarations",                 true,  false, true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_VARIABLE_FN_CONST,                        "VAR_FN_LOC_CONST_CNT",           "Function-scope constant variable declarations",               true,  false, true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_VARIABLE_FN_VOLATILE,                     "VAR_FN_LOC_VOLATILE_CNT",        "Function-scope volatile variable declarations",               true,  false, true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_VARIABLE_FN_REGISTER,                     "VAR_FN_LOC_REG_CNT",             "Function-scope register variable declarations",               true,  false, true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_VARIABLE_FN_AUTO,                         "VAR_FN_LOC_AUTO_CNT",            "Function-scope auto variable declarations",                   true,  false, true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_VARIABLE_FN_EXTERN,                       "VAR_FN_EXT_CNT",                 "Function-scope external variable declarations",               true,  false, true,  true,  true,       false,     false,        1,        "" )

METRIC( METRIC_TYPE_RETURNPOINTS,                             "RETURN_POINT_CNT",               "Return points",                                               false, false, true,  true,  true,       false,     false,        1,        "" )
METRIC_ALIAS( "RETURN_POINT_CNT", "HIS_RETURN" )

METRIC( METRIC_TYPE_STATEMENTS,                               "STMT_CNT",                       "Statement count",								               true,  true,  true,  true,  true,       false,     true,         1,        "Number of statements" )
METRIC( METRIC_TYPE_TOKEN_STATEMENTS,                         "RAW_STMT_CNT",                   "Statement count (raw source)",						           true,  true,  true,  true,  true,       false,     true,         1,        "Number of statements in the code before pre-processing" )
METRIC_ALIAS( "RAW_STMT_CNT", "HIS_STMT" )

METRIC( METRIC_TYPE_HIS_COMMENT_DENSITY,                      "COMMENT_HIS_COMF",               "Comment density",                                             true,  true,  true, false, true,       false,     false,     1000,        "Relationship of the number of comments to the number of statements, with range 0-1.  HIS metric." )
METRIC_ALIAS( "COMMENT_HIS_COMF", "HIS_COMF" )
METRIC( METRIC_TYPE_COMMENT_BYTE_COUNT,                       "COMMENT_BYTE_CNT",               "Comments in bytes",                                           true,  true,  true, false, true,       false,     true,         1,        "Counts the total number of bytes which are used in comments.  Note that --exclude-function does not have any effect on this metric." )
METRIC( METRIC_TYPE_COMMENT_COUNT,                            "COMMENT_CNT",                    "Comment count",                                               true,  true,  true, false, true,       false,     true,         1,        "Counts the total number of comments.  Note that --exclude-function does not have any effect on this metric." )


METRIC( METRIC_TYPE_CYCLOMATIC,                               "MCCABE",                         "McCabe complexity",							               false, false, true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_MODIFIED_CYCLOMATIC,                      "MCCABE_MOD",                     "Modified McCabe complexity", 					               false, false, true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOK_CYCLOMATIC,                           "RAW_MCCABE",                     "McCabe complexity (raw source)",					           false, false, true,  true,  true,       false,     false,        1,        "" )
METRIC_ALIAS( "RAW_MCCABE", "HIS_MCCABE" )
METRIC( METRIC_TYPE_TOK_MODIFIED_CYCLOMATIC,                  "RAW_MCCABE_MOD",                 "Modified McCabe complexity (raw source)",  		           false, false, true,  true,  true,       false,     false,        1,        "" )
 
METRIC( METRIC_TYPE_LOCAL_FUNCTIONS,                          "FUNC_LOCAL_CNT",                 "Local Functions",									           true,  true,  false, false, true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_EXTERN_EXPL_FUNCTIONS,                    "FUNC_EXTERN_EXPL_CNT",           "External (explicit) functions declarations",		           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_EXTERN_IMPL_FUNCTIONS,                    "FUNC_EXTERN_IMPL_CNT",           "External (implicit) functions declarations",		           true,  true,  true,  true,  true,       false,     true,         1,        "" )
METRIC( METRIC_TYPE_INLINE_FUNCTIONS,                         "FUNC_INLINE_CNT",                "Inline Functions",									           true,  true,  false, false, true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_CALLED_BY_LOCAL,                          "FUNC_CALLED_BY_LOCAL",           "Number of local functions calling this function",             false, false, true,  true,  true,       true,      false,        1,        "" )
METRIC( METRIC_TYPE_CALLED_BY_EXTERN,                         "FUNC_CALLED_BY_EXTERN",          "Number of external functions calling this function",          false, false, true,  true,  true,       true,      false,        1,        "" )
METRIC( METRIC_TYPE_FUNCTION_CALLS,                           "OP_FN_CALL_CNT",                 "Function Calls",									           false, false, true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_FUNCTION_PATHS,                           "FUNC_PATHS",                     "Number of paths through the function",				           false, false, true,  true,  false,      false,     false,        1,        "" )
METRIC_ALIAS( "FUNC_PATHS", "HIS_PATH" )
METRIC( METRIC_TYPE_DIFFERENT_FUNCTIONS_CALLED,               "OP_FN_CALL_UNIQUE_CNT",          "No. different functions called",					           false, false, true,  true,  true,       false,     false,        1,        "Of the total number of functions called (see OP_FN_CALL_CNT), this represents the number of uniquely addressed functions.  Does not include functions called via function pointers" )
METRIC_ALIAS( "OP_FN_CALL_UNIQUE_CNT", "HIS_CALLS" )
METRIC( METRIC_TYPE_LOCAL_FUNCTION_CALLS,                     "LOCAL_FN_CALL_CNT",              "Local Function Calls",								           false, false, true,  true,  true,       true,      false,        1,        "Does not include functions called via function pointers" )
METRIC( METRIC_TYPE_LINE_COUNT,                               "FILE_LINE_CNT",                  "Size in lines",									           true,  true,  false, false, true,       false,     false,        1,        "Counts number of newlines in the file" )
METRIC( METRIC_TYPE_FUNCTION_DEF_LINE_COUNT,                  "FUNC_DEFINITION_LINE_CNT",       "Function (definition) size in lines",				           false, false, true,  true,  true,       false,     false,        1,        "Counts number of newlines in the function body" )
METRIC( METRIC_TYPE_FUNCTION_BODY_LINE_COUNT,                 "FUNC_BODY_LINE_CNT",             "Function (body) size in lines",					           false, false, true,  true,  true,       false,     false,        1,        "Counts number of newlines in the function body" )
METRIC( METRIC_TYPE_FUNCTION_PARAMETERS,                      "STMT_HIS_PARAM",                 "Function Parameters",								           false, false, true, true,  true,        false,     false,        1,        "Number of parameters associated with a function definition (declarations are not included)." )
METRIC_ALIAS( "STMT_HIS_PARAM", "HIS_PARAM" )
METRIC( METRIC_TYPE_DECISIONS,                                "TODO",                           "Decisions",										           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_LOOPS,                                    "TODO",                           "Loops",											           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_NESTING_LEVEL,                            "FUNC_NESTING",                   "Nesting Level",									           false, false, true,  true,  true,       false,     false,        1,        "" )
METRIC_ALIAS( "FUNC_NESTING", "HIS_LEVEL" )
METRIC( METRIC_TYPE_VOCF,                                     "HIS_VOCF",                       "VOCF",												           false, false, true,  true,  true,       false,     false,     1000,        "" )

METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_ASSIGN,               "OP_ASSIGN_CNT",                  "Basic assignment operators",						           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_ADDITION,             "OP_ADD_CNT",                     "Addition operators",								           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_ADDITION_ASSIGN,      "OP_ADD_ASSIGN_CNT",              "Addition with assign operators",					           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_SUBTRACTION,          "OP_SUB_CNT",                     "Subtraction operators",							           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_SUBTRACTION_ASSIGN,   "OP_SUB_ASSIGN_CNT",              "Subtraction with assign operators",				           true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_UNARY_PLUS,           "OP_UNARY_PLUS_CNT",              "Unary plus operators",							               true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_UNARY_MINUS,          "OP_UNARY_MINUS_CNT",             "Unary minus operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_MULTIPLICATION,       "OP_MULT_CNT",                    "Multiplication operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_MULTIPLICATION_ASSIGN,"OP_MULT_ASSIGN_CNT",             "Multiplication with assignment operators",			true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_DIVISION,             "OP_DIV_CNT",                     "Division operators",								true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_DIVISION_ASSIGN,      "OP_DIV_ASSIGN_CNT",              "Division with assign operators",					true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_MODULO,               "OP_MOD_CNT",                     "Modulo operators",									true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_MODULO_ASSIGN,        "OP_MOD_ASSIGN_CNT",              "Modulo with assign operators",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_INCREMENT_PRE,        "OP_INC_PRE_CNT",                 "Pre-increment operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_INCREMENT_POST,       "OP_INC_POST_CNT",                "Post-increment operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_DECREMENT_PRE,        "OP_DEC_PRE_CNT",                 "Pre-decrement operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARITHMETIC_DECREMENT_POST,       "OP_DEC_POST_CNT",                "Post-decrement operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_SHIFT_LEFT,                      "OP_SHFT_LEFT_CNT",               "Left shift operators",								true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_SHIFT_LEFT_ASSIGN,               "OP_SHFT_LEFT_ASSIGN_CNT",        "Left shift with assign operators",					true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_SHIFT_RIGHT,                     "OP_SHFT_RGHT_CNT",               "Right shift operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_SHIFT_RIGHT_ASSIGN,              "OP_SHFT_RGHT_ASSIGN_CNT",        "Right shift with assign operators",				true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_COMP_LESS_THAN,                  "OP_CMP_LT_CNT",                  "Less than operators",								true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_COMP_GREATER_THAN,               "OP_CMP_GT_CNT",                  "Greater than operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_COMP_LESS_THAN_EQUAL,            "OP_CMP_LT_EQ_CNT",               "Less than or equal operators",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_COMP_GREATER_THAN_EQUAL,         "OP_CMP_GT_EQ_CNT",               "Greater than or equal operators",					true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_COMP_EQUAL,                      "OP_CMP_EQ_CNT",                  "Equality operators",								true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_COMP_NOT_EQUAL,                  "OP_CMP_NEQ_CNT",                 "Inequality operators",								true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_COMMA,                           "OP_COMMA_CNT",                   "Comma operators",									true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_TERNARY,                         "OP_TERNARY_CNT",                 "TERNARY operators",								true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_LOGICAL_AND,                     "OP_LOG_AND_CNT",                 "Logical AND operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_LOGICAL_OR,                      "OP_LOG_OR_CNT",                  "Logical OR operators",								true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_LOGICAL_NOT,                     "OP_LOG_NIT_CNT",                 "Logical NOT operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_BITWISE_AND,                     "OP_BITWISE_AND_CNT",             "Bitwise AND operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_BITWISE_AND_ASSIGN,              "OP_BITWISE_AND_ASSIGN_CNT",      "Bitwise AND with assign operators",				true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_BITWISE_OR,                      "OP_BITWISE_OR_CNT",              "Bitwise OR operators",								true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_BITWISE_OR_ASSIGN,               "OP_BITWISE_OR_ASSIGN_CNT",       "Bitwise OR with assign operators",					true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_BITWISE_XOR,                     "OP_BITWISE_XOR_CNT",             "Bitwise XOR operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_BITWISE_XOR_ASSIGN,              "OP_BITWISE_XOR_ASSIGN_CNT",      "Bitwise XOR with assign operators",				true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_BITWISE_NOT,                     "OP_BITWISE_NOT_CNT",             "Bitwise NOT operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_PTR_TO_MEMBER_DIRECT,            "OP_PTR_TO_MEMBER_DIRECT_CNT",    "Pointer to member (direct) operators",				true,  true,  false, true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_PTR_TO_MEMBER_INDIRECT,          "OP_PTR_TO_MEMBER_INDIRECT_CNT",  "Pointer to member (indirect) operators",		    true,  true,  false, true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ADDRESS_OF,                      "OP_ADDR_OF_CNT",                 "Address of operators",								true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_DEREFERENCE,                     "OP_DEREF_CNT",                   "Dereference operators",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ARRAY_SUBSCRIPT,                 "OP_ARRAY_SUBSCRIPT_CNT",         "Array subscript operators",						true,  true,  true,	 true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_MEMBER_ACCESS_DIRECT,            "OP_MEMBER_ACCESS_DIRECT_CNT",    "Member access (direct) operators",					true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_MEMBER_ACCESS_POINTER,           "OP_MEMBER_ACCESS_POINTER_CNT",   "Member access (via pointer) operators",			true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_ALIGN_OF,                        "OP_ALIGNOF_CNT",                 "Alignof operators",								true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_CAST,                            "OP_CAST_CNT",                    "Cast operators",									true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_OPERATOR_TYPES,                           "OP_TYPES_CNT",                   "Number of different types of C operator",			true,  true,  true,  true,  true,       false,     true,         1,        "Number of distinct different types of operators." )

METRIC( METRIC_TYPE_OPERATOR_COUNT,                           "OP_CNT",                         "Number of operators",                              true,  true,  true,  true,  true,       false,     true,         1,        "Total number of operators used" )
METRIC( METRIC_TYPE_OPERATOR_HALSTEAD_UNIQUE,                 "HALSTEAD_OPERATOR_UNIQUE_CNT",   "Number of different types of halstead operators",  false, false, true,  true,  true,       false,     false,        1,        "Number of distinct different types of operators (as classified for the purpose of Halstead metrics; this is not the same classification as the 'C' standard)" )
METRIC( METRIC_TYPE_OPERATOR_HALSTEAD_COUNT,                  "HALSTEAD_OPERATOR_CNT",          "Number of halstead operators",                     false, false, true,  true,  true,       false,     false,        1,        "Total number of operators (as classified for the purpose of Halstead metrics; this is not the same classification as the 'C' standard) used" )

METRIC( METRIC_TYPE_OPERAND_HALSTEAD_UNIQUE,                  "HALSTEAD_OPERAND_UNIQUE_CNT",    "Number of different halstead operands",            false, false, true,  true,  true,       false,     false,        1,        "Number of distinct different types of operand (as classified for the purpose of Halstead metrics; this is not the same classification as the 'C' standard)" )
METRIC( METRIC_TYPE_OPERAND_HALSTEAD_COUNT,                   "HALSTEAD_OPERAND_CNT",           "Number of halstead operands",                      false, false, true,  true,  true,       false,     false,        1,        "Total number of operands (as classified for the purpose of Halstead metrics; this is not the same classification as the 'C' standard) used" )

METRIC( METRIC_TYPE_HALSTEAD_VOCABULARY,                      "HALSTEAD_VOCABULARY",            "Halstead program vocabulary",                      false, false, true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_HALSTEAD_LENGTH,                          "HALSTEAD_LENGTH",                "Halstead program length",                          false, false, true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_HALSTEAD_CALC_LENGTH,                     "HALSTEAD_CALC_LENGTH",           "Halstead calculated program length",               false, false, true,  true,  true,       false,     false,       10,        "" )
METRIC( METRIC_TYPE_HALSTEAD_VOLUME,                          "HALSTEAD_VOLUME",                "Halstead volume",                                  false, false, true,  true,  true,       false,     false,       10,        "" )
METRIC( METRIC_TYPE_HALSTEAD_DIFFICULTY,                      "HALSTEAD_DIFFICULTY",            "Halstead difficulty",                              false, false, true,  true,  true,       false,     false,       10,        "" )


METRIC( METRIC_TYPE_TOKEN_BOOL,                               "TOK_BOOL",                       "Number of 'bool' tokens",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_INLINE,                             "TOK_INLINE",                     "Number of 'inline' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_VIRTUAL,                            "TOK_VIRTUAL",                    "Number of 'virtual' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MUTABLE,                            "TOK_MUTABLE",                    "Number of 'mutable' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_FRIEND,                             "TOK_FRIEND",                     "Number of 'friend' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_ASM,                                "TOK_ASM",                        "Number of 'asm' tokens",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_CLASS,                              "TOK_CLASS",                      "Number of 'class' tokens",							true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_DELETE,                             "TOK_DELETE",                     "Number of 'delete' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_NEW,                                "TOK_NEW",                        "Number of 'new' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_OPERATOR,                           "TOK_OPERATOR",                   "Number of 'operator' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_PRIVATE,                            "TOK_PRIVATE",                    "Number of 'private' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_PROTECTED,                          "TOK_PROTECTED",                  "Number of 'protected' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_PUBLIC,                             "TOK_PUBLIC",                     "Number of 'public' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_THIS,                               "TOK_THIS",                       "Number of 'this' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_NAMESPACE,                          "TOK_NAMESPACE",                  "Number of 'namespace' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_USING,                              "TOK_USING",                      "Number of 'using' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_TRY,                                "TOK_TRY",                        "Number of 'try' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_CATCH,                              "TOK_CATCH",                      "Number of 'catch' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_THROW,                              "TOK_THROW",                      "Number of 'throw' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
// TODO: const_cast, static_cast, dynamic_cast, reinterpret_cast
METRIC( METRIC_TYPE_TOKEN_TYPEID,                             "TOK_TYPEID",                     "Number of 'typeid' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_TEMPLATE,                           "TOK_TEMPLATE",                   "Number of 'template' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_EXPLICIT,                           "TOK_EXPLICIT",                   "Number of 'explicit' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_TRUE,                               "TOK_TRUE",                       "Number of 'true' tokens",					   	    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_FALSE,                              "TOK_FALSE",                      "Number of 'false' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_TYPENAME,                           "TOK_TYPENAME",                   "Number of 'typename' tokens",						true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_NOT,                                "TOK_NOT",                        "Number of '!' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_NOT_EQUAL,                          "TOK_NOT_EQUAL",                  "Number of '!=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MODULO,                             "TOK_MODULO",                     "Number of '%' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MODULO_ASSIGN,                      "TOK_MODULO_ASSIGN",              "Number of '%=' tokens",					    	true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_AMP,                                "TOK_AMP",                        "Number of '&' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_AMPAMP,                             "TOK_AMPAMP",                     "Number of '&&' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_PIPEPIPE,                           "TOK_PIPEPIPE",                   "Number of '||' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_AND_ASSIGN,                         "TOK_AND_ASSIGN",                 "Number of '&=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_LPAREN,                             "TOK_LPAREN",                     "Number of '(' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_RPAREN,                             "TOK_RPAREN",                     "Number of ')' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_ASTERISK,                           "TOK_ASTERISK",                   "Number of '*' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_ASTERISK_ASSIGN,                    "TOK_ASTERISK_ASSIGN",            "Number of '*=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_PLUS,                               "TOK_PLUS",                       "Number of '+' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_PLUSPLUS,                           "TOK_PLUSPLUS",                   "Number of '++' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_PLUS_ASSIGN,                        "TOK_PLUS_ASSIGN",                "Number of '+=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_COMMA,                              "TOK_COMMA",                      "Number of ',' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MINUS,                              "TOK_MINUS",                      "Number of '-' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MINUSMINUS,                         "TOK_MINUSMINUS",                 "Number of '--' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MINUS_ASSIGN,                       "TOK_MINUS_ASSIGN",               "Number of '-=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MEMBER_POINTER,                     "TOK_MEMBER_PTR",                 "Number of '->' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MEMBER_REF,                         "TOK_MEMBER_REF",                 "Number of '.' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_ELLIPSIS,                           "TOK_ELLIPSIS",                   "Number of '...' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_SLASH,                              "TOK_SLASH",                      "Number of '/' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_SLASH_ASSIGN,                       "TOK_SLASH_ASSIGN",               "Number of '/=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_COLON,                              "TOK_COLON",                      "Number of ':' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_COLONCOLON,                         "TOK_COLONCOLON",                 "Number of '::' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_LESS,                               "TOK_LESS",                       "Number of '<' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_LESSLESS,                           "TOK_LESSLESS",                   "Number of '<<' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_LESSLESS_ASSIGN,                    "TOK_LESSLESS_ASSIGN",            "Number of '<<=' tokens",					    	true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_LESS_EQUAL,                         "TOK_LESS_EQUAL",                 "Number of '<=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_ASSIGN,                             "TOK_ASSIGN",                     "Number of '=' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_COMPARISON,                         "TOK_COMPARISON",                 "Number of '==' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MORE,                               "TOK_MORE",                       "Number of '>' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MOREMORE,                           "TOK_MOREMORE",                   "Number of '>>' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MOREMORE_ASSIGN,                    "TOK_MOREMORE_ASSIGN",            "Number of '>>=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_MORE_EQUAL,                         "TOK_MORE_EQUAL",                 "Number of '>=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_LSQUARE,                            "TOK_LSQUARE",                    "Number of '[' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_RSQUARE,                            "TOK_RSQUARE",                    "Number of ']' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_LBRACE,                             "TOK_LBRACE",                     "Number of '{' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_RBRACE,                             "TOK_RBRACE",                     "Number of '}' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_QUESTION,                           "TOK_QUESTION",                   "Number of '?' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_CARET,                              "TOK_CARET",                      "Number of '^' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_CARET_ASSIGN,                       "TOK_CARET_ASSIGN",               "Number of '^=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_PIPE,                               "TOK_PIPE",                       "Number of '|' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_PIPE_ASSIGN,                        "TOK_PIPE_ASSIGN",                "Number of '|=' tokens",						    true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_TOKEN_TILDE,                              "TOK_TILDE",                      "Number of '~' tokens",						        true,  true,  true,  true,  true,       false,     false,        1,        "" )
METRIC( METRIC_TYPE_HIS_CALLING,                              "HIS_CALLING",                    "Number of functions which call this function",		false, false, true,  true,  true,       false,     false,        1,        "" )
